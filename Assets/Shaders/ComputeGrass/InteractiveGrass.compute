// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct GrassPoint{
    float3 position;
    float height;
    float4 rotation;
};

RWStructuredBuffer<GrassPoint> grassPointBuffer;

// Variables set from the CPU 
uint bufferSize;
float deltaTime;
float unity_Time;

// Texture2D<float4> NoiseTexture;
// SamplerState samplerNoiseTexture;

// int mouseInteractionIndex;
// float mouseInteractionForce;
float4 mouseInteractionPosition;
float mouseInteractionRadius;
bool mouseInteractionFalloff;

float moveTowards(float current, float target, float maxDelta)
{
    if (current < target)
    {
        return min(current + maxDelta, target);
    }
    else
    {
        return max(current - maxDelta, target);
    }
}

[numthreads(256, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // float4 uv = float4(unity_Time + grassPointBuffer[id.x].position.x,
    //                    unity_Time + grassPointBuffer[id.x].position.y, 0, 0);
    // float noiseValue = tex2Dlod(samplerNoiseTexture, uv).r;

    if (mouseInteractionPosition.w != 0)
    {
        float distance = length(mouseInteractionPosition.xyz - grassPointBuffer[id.x].position);

        if (distance <= mouseInteractionRadius)
        {
            float previousAngle = 2.0 * atan2(grassPointBuffer[id.x].rotation.y, grassPointBuffer[id.x].rotation.w);
            float angle = (1.0 - distance / mouseInteractionRadius) * 2;

            if (mouseInteractionPosition.x > grassPointBuffer[id.x].position.x)
            {
                angle = -angle;
            }

            // angle = moveTowards(previousAngle, angle, 4 * deltaTime);

            grassPointBuffer[id.x].rotation = float4(0, sin(angle * 0.5), 0, cos(angle * 0.5));

            return;
        }
    }


    float previousAngle = 2.0 * atan2(grassPointBuffer[id.x].rotation.y, grassPointBuffer[id.x].rotation.w);
    // float angle = (sin(unity_Time + grassPointBuffer[id.x].position.z) * 2.0 - 1.0) * 0.13f;

    float angle = moveTowards(previousAngle, 0, 2 * deltaTime);
    grassPointBuffer[id.x].rotation = float4(0, sin(angle * 0.5), 0, cos(angle * 0.5));
}
